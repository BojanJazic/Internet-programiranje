/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2025-03-19 11:05:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import beans.PromotionBean;
import java.util.List;
import service.PromotionManager;

public final class promotions_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("service.PromotionManager");
    _jspx_imports_classes.add("beans.PromotionBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("\t<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css\" rel=\"stylesheet\">\r\n");
      out.write("   \r\n");
      out.write("\t<title>Promotions</title>\r\n");
      out.write("\t\r\n");
      out.write("\t<style>\r\n");
      out.write("    \t.container {\r\n");
      out.write("    \t\tmax-width: 100vw;\r\n");
      out.write("    \t\tmargin-top: 60px;\r\n");
      out.write("    \t}\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \t .corner-element {\r\n");
      out.write("        \tposition: absolute;\r\n");
      out.write("    \t\ttop: 10px;   \r\n");
      out.write("    \t\tleft: 10px;\r\n");
      out.write("    \t\tbackground-color: rgb(139, 202, 12);\r\n");
      out.write("    \t\tborder: 2px solid black;\r\n");
      out.write("    \t\tborder-radius: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .back-button {\r\n");
      out.write("    \t\tposition: absolute;\r\n");
      out.write("    \t\ttop: 0;\r\n");
      out.write("    \t\tleft: 0;\r\n");
      out.write("    \t\tbackground: none;\r\n");
      out.write("    \t\tpadding: 0;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.button-text {\r\n");
      out.write("    \t\tall: unset; /* Resetuje sve defaultne stilove dugmeta */\r\n");
      out.write("    \t\tcolor: #080710;\r\n");
      out.write("    \t\tbackground: rgb(139, 202, 12);\r\n");
      out.write("    \t\tpadding: 10px 10px;\r\n");
      out.write("    \t\tborder-radius: 5px;\r\n");
      out.write("    \t\tfont-weight: bold;\r\n");
      out.write("\t\t    text-align: center;\r\n");
      out.write("\t\t    cursor: pointer;\r\n");
      out.write("\t\t    width: calc(100% - 24px);\r\n");
      out.write("\t\t    /* padding-top: 10px;\r\n");
      out.write("\t\t    padding-bottom: 10px; */\r\n");
      out.write("    \r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\ttr {\r\n");
      out.write("\t\t\tjustify-content: center;\r\n");
      out.write("\t\t\ttext-align: center;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\ttd {\r\n");
      out.write("\t\t\tjustify-content: center;\r\n");
      out.write("\t\t\ttext-align: center;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.thead-dark {\r\n");
      out.write("\t\t\tbackground-color: rgb(139, 202, 12);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t\r\n");
      out.write("    </style>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\r\n");
      out.write("\t\t<div class=\"corner-element\">\r\n");
      out.write("    \t\t<!-- onclick=\"window.location.href='Controller?action=profileView'\" - vraca na specificnu stranicu -->\r\n");
      out.write("            <button type=\"button\" class=\"button-text\" onclick=\"window.history.back()\">\r\n");
      out.write("    \t\t\t<i class=\"bi bi-arrow-left\"></i> <!-- Bootstrap ikona -->\r\n");
      out.write("\t\t\t</button>\r\n");
      out.write("        </div>\r\n");
      out.write("    \r\n");
      out.write("    \t<table class=\"table table-striped\">\r\n");
      out.write("\t\t<thead class=\"thead-dark\">\r\n");
      out.write("\t\t\t <tr>\r\n");
      out.write("\t            <th>Title</th>\r\n");
      out.write("\t            <th>Description</th>\r\n");
      out.write("\t            <th>Start date</th>\r\n");
      out.write("\t            <th>End date</th>\r\n");
      out.write("\t           \r\n");
      out.write("        \t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t\t ");

			 	PromotionManager promotionManager = new PromotionManager();
			 	List<PromotionBean> promotions = promotionManager.getPromotions();
			 	
			 	for(PromotionBean promotion : promotions){
			 
      out.write("\r\n");
      out.write("\t\t\t \t<tr>\r\n");
      out.write("\t\t\t \t\t<td>");
      out.print( promotion.getTitle() );
      out.write("</td>\r\n");
      out.write("\t\t\t \t\t<td>");
      out.print( promotion.getDescription() );
      out.write("</td>\r\n");
      out.write("\t\t\t \t\t<td>");
      out.print( promotion.getStartDate().toString() );
      out.write("</td>\r\n");
      out.write("\t\t\t \t\t<td>");
      out.print( promotion.getEndDate().toString() );
      out.write("</td>\r\n");
      out.write("\t\t\t \t</tr>\r\n");
      out.write("\t\t\t ");
} 
      out.write("\r\n");
      out.write("\t\t</tbody> \r\n");
      out.write("\t</table>\r\n");
      out.write("        \r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
