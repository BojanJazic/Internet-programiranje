/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2025-03-18 12:04:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import beans.ClientBean;
import dto.Vehicle;
import java.util.List;

public final class dataDetection_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("beans.ClientBean");
    _jspx_imports_classes.add("dto.Vehicle");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("\t");

		  if(session.getAttribute("clientBean") == null || !((ClientBean) session.getAttribute("clientBean")).isLoggedIn()) {
			  RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/pages/login.jsp");
			  dispatcher.forward(request, response);
		      return; // Prekida dalje izvr≈°avanje JSP stranice
		  }
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("\t\r\n");
      out.write("\t<title>DataDetection</title>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<style>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t.container {\r\n");
      out.write("\t\t\tmax-width: 500px;\r\n");
      out.write("\t\t\tmargin-top: 120px;\r\n");
      out.write("\t\t\tdisplay: flex;\r\n");
      out.write("\t\t\tflex-direction: column;\r\n");
      out.write("\t\t\tjustify-content: center;\r\n");
      out.write("\t\t\talign-items: center;\r\n");
      out.write("\t\t\ttext-align: center;\r\n");
      out.write("\t\t\tposition: relative;\r\n");
      out.write("\t\t\tbackground: #d1f542;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\th2 {\r\n");
      out.write("\t\t\tpadding-top: 15px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.corner-element {\r\n");
      out.write("\t\t\tposition: absolute;\r\n");
      out.write("\t\t\ttop: 10px;\r\n");
      out.write("\t\t\tleft: 10px;\r\n");
      out.write("\t\t\tborder: 2px solid black;\r\n");
      out.write("\t\t\tborder-radius: 10px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.back-button{\r\n");
      out.write("\t\t\tposition: absolute;\r\n");
      out.write("\t\t\ttop: 0;\r\n");
      out.write("\t\t\tleft: 0;\r\n");
      out.write("\t\t\tbackground: none;\r\n");
      out.write("\t\t\tpadding: 0;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t.button-text {\r\n");
      out.write("    \t\tall: unset; /* Resetuje sve defaultne stilove dugmeta */\r\n");
      out.write("    \t\tcolor: #080710;\r\n");
      out.write("    \t\tbackground: rgb(139, 202, 12);\r\n");
      out.write("    \t\tpadding: 10px 10px;\r\n");
      out.write("    \t\tborder-radius: 5px;\r\n");
      out.write("    \t\tfont-weight: bold;\r\n");
      out.write("\t\t    text-align: center;\r\n");
      out.write("\t\t    cursor: pointer;\r\n");
      out.write("\t\t    width: calc(100% - 24px);\r\n");
      out.write("\t\t    /* padding-top: 10px;\r\n");
      out.write("\t\t    padding-bottom: 10px; */\r\n");
      out.write("    \r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.btn {\r\n");
      out.write("\t\t\tmargin-top: 20px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t</style>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t <!-- Modalni prozor za poruku da klijent ne moze iznajmiti auto ako nema vozacku -->\r\n");
      out.write("    <div class=\"modal fade\" id=\"errorModal\" tabindex=\"-1\" aria-labelledby=\"errorModalLabel\" aria-hidden=\"true\">\r\n");
      out.write("        <div class=\"modal-dialog\">\r\n");
      out.write("            <div class=\"modal-content\">\r\n");
      out.write("                <div class=\"modal-header\">\r\n");
      out.write("                    <h5 class=\"modal-title\" id=\"errorModalLabel\">Error</h5>\r\n");
      out.write("                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"modal-body\">\r\n");
      out.write("                    Problem with vehicle rental!\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"modal-footer\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\r\n");
      out.write("\t\t<div class=\"corner-element\">\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"button-text\" onclick=\"window.location.href='Controller?action=mainPage'\">\r\n");
      out.write("\t\t\t\t<i class=\"bi bi-arrow-left\"></i>\r\n");
      out.write("\t\t\t</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h2 class=\"mb-4\">Rental informations</h2>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div class=\"mb-3\">\r\n");
      out.write("    \t\t<label for=\"location\" class=\"form-label\">Location</label>\r\n");
      out.write("    \t\t<input type=\"text\" id=\"location\" name=\"location\" class=\"form-control w-100\" disabled required>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"mb-3\">\r\n");
      out.write("\t\t\t<label for=\"vehicles\" class=\"form-label\">Vehicles</label>\r\n");
      out.write("\t\t\t<select id=\"vehicles\" name=\"vehicles\" class=\"form-control w-100\">\r\n");
      out.write("\t\t\t\t");
 for(Vehicle v : (List<Vehicle>) request.getAttribute("vehicles") ){ 
      out.write("\r\n");
      out.write("\t\t\t\t\t<option value=");
      out.print(v.getIdVehicle() );
      out.write(" required> ");
      out.print( v.getManufacturer() );
      out.write(' ');
      out.print( '-'  );
      out.write(' ');
      out.print( v.getModel() );
      out.write(" </option>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t</select>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div class=\"mb-3\">\r\n");
      out.write("\t\t\t<label for=\"cardNumber\" class=\"form-label\">Card number</label>\r\n");
      out.write("\t\t\t<input type=\"text\" id=\"cardNumber\" name=\"cardNumber\" class=\"form-control w-100\" required\r\n");
      out.write("\t\t\t\tminlength=\"16\" maxlength=\"16\" pattern=\"[0-9]{16}\" \r\n");
      out.write("                title=\"Card Number must be exactly 16 numbers.\"\r\n");
      out.write("                oninput=\"validateCardNumber(this)\"\r\n");
      out.write("\t\t\t>\r\n");
      out.write("\t\t\t<span id=\"errorMessage\" style=\"color:red; display:none;\">Card number must be exactly 16 digits!</span>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div class=\"mb-3\">\r\n");
      out.write("\t\t\t<a href=\"#\" id=\"startRentButton\" class=\"btn btn-primary\">Start</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction getLocation() {\r\n");
      out.write("\t    if (navigator.geolocation) {\r\n");
      out.write("\t        console.log(\"Geolocation is supported by this browser.\");\r\n");
      out.write("\t        \r\n");
      out.write("\t        navigator.geolocation.getCurrentPosition(\r\n");
      out.write("\t            (position) => {\r\n");
      out.write("\t                console.log(\"Location retrieved successfully:\", position);\r\n");
      out.write("\r\n");
      out.write("\t                // Proveravamo eksplicitno da li postoje latitude i longitude\r\n");
      out.write("\t                if (position.coords && typeof position.coords.latitude === \"number\" && typeof position.coords.longitude === \"number\") {\r\n");
      out.write("\t                    const lat = position.coords.latitude.toFixed(6);  // Ograniƒçavamo broj decimala\r\n");
      out.write("\t                    const lon = position.coords.longitude.toFixed(6);\r\n");
      out.write("\r\n");
      out.write("\t                    console.log(`Latitude: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${lat}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(", Longitude: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${lon}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\r\n");
      out.write("\r\n");
      out.write("\t                    const locationInput = document.getElementById(\"location\");\r\n");
      out.write("\t                    \r\n");
      out.write("\t                    locationInput.value = position.coords.latitude + \", \" + position.coords.longitude;\r\n");
      out.write("\t                    \r\n");
      out.write("\t                    fetch('/ClientApp/Controller', {\r\n");
      out.write("\t                    \tmethod: 'POST',\r\n");
      out.write("\t                    \theaders: {\r\n");
      out.write("\t                    \t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n");
      out.write("\t                    \t},\r\n");
      out.write("\t                    \tbody: 'action=saveLocation&latitude=' + encodeURIComponent(lat) + '&longitude=' + encodeURIComponent(lon)\r\n");
      out.write("\t                    });\r\n");
      out.write("\t                    \r\n");
      out.write("\t                } else {\r\n");
      out.write("\t                    console.error(\"Latitude or longitude is not valid!\");\r\n");
      out.write("\t                    alert(\"Could not retrieve valid coordinates. Please try again.\");\r\n");
      out.write("\t                }\r\n");
      out.write("\t            },\r\n");
      out.write("\t            (error) => {\r\n");
      out.write("\t                console.error(\"Error getting location:\", error);\r\n");
      out.write("\t                alert(\"Unable to retrieve your location! Please allow location access.\");\r\n");
      out.write("\t            }\r\n");
      out.write("\t        );\r\n");
      out.write("\t    } else {\r\n");
      out.write("\t        console.error(\"Geolocation is not supported by this browser.\");\r\n");
      out.write("\t        alert(\"Geolocation is not supported by this browser!\");\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\twindow.onload = getLocation;\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction validateCardNumber(input) {\r\n");
      out.write("        // Uklanja sve karaktere koji nisu cifre\r\n");
      out.write("        input.value = input.value.replace(/\\D/g, '');\r\n");
      out.write("\r\n");
      out.write("        // Ograniƒçava unos na 16 cifara\r\n");
      out.write("        if (input.value.length > 16) {\r\n");
      out.write("            input.value = input.value.slice(0, 16);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tdocument.getElementById('startRentButton').addEventListener('click', function(event){\r\n");
      out.write("\t    const cardNumber = document.getElementById('cardNumber').value;\r\n");
      out.write("\t    const selectedVehicleId = document.getElementById('vehicles').value;\r\n");
      out.write("\r\n");
      out.write("\t    console.log(\"Selected Vehicle ID:\", selectedVehicleId); // Provjera vrijednosti\r\n");
      out.write("\r\n");
      out.write("\t    if(cardNumber.length < 16){\r\n");
      out.write("\t        document.getElementById('errorMessage').style.display = 'block';\r\n");
      out.write("\t        event.preventDefault();\r\n");
      out.write("\t    } else {\r\n");
      out.write("\t        document.getElementById('errorMessage').style.display = 'none';\r\n");
      out.write("\r\n");
      out.write("\t        // Slanje podataka na server koristeƒái fetch API\r\n");
      out.write("\t        fetch('/ClientApp/Controller', {\r\n");
      out.write("\t            method: 'POST',\r\n");
      out.write("\t            headers: {\r\n");
      out.write("\t                'Content-Type': 'application/x-www-form-urlencoded',\r\n");
      out.write("\t            },\r\n");
      out.write("\t            body: 'action=startRent&vehicleId=' + encodeURIComponent(selectedVehicleId) // Koristite jednostruke navodnike i konkatenaciju\r\n");
      out.write("\t        })\r\n");
      out.write("\t        .then(() => {\r\n");
      out.write("\t            console.log('Data sent successfully');\r\n");
      out.write("\t            window.location.href = 'Controller?action=rentalPeriod'; // Preusmjeri nakon slanja\r\n");
      out.write("\t        })\r\n");
      out.write("\t        .catch((error) => {\r\n");
      out.write("\t            console.error('Error: ', error);\r\n");
      out.write("\t        });\r\n");
      out.write("\t    }\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
