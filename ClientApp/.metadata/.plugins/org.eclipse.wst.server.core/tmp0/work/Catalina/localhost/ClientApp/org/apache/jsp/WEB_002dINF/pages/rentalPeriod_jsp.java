/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2025-03-18 12:04:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import beans.ClientBean;

public final class rentalPeriod_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("beans.ClientBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("\t");

		  if(session.getAttribute("clientBean") == null || !((ClientBean) session.getAttribute("clientBean")).isLoggedIn()) {
			  RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/pages/login.jsp");
			  dispatcher.forward(request, response);
		      return; // Prekida dalje izvršavanje JSP stranice
		  }
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write(" \t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("\t\r\n");
      out.write("\t<title>RentalPeriod</title>\r\n");
      out.write("\r\n");
      out.write("\t<style>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.container {\r\n");
      out.write("\t\t\tmax-width: 300px;\r\n");
      out.write("\t\t\tmargin-top: 200px;\r\n");
      out.write("\t\t\tbackground: #d1f542;\r\n");
      out.write("\t\t\tdisplay: flex;\r\n");
      out.write("\t\t\tflex-direction: column;\r\n");
      out.write("\t\t\tjustify-content: center;\r\n");
      out.write("\t\t\talign-items: center;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tinput {\r\n");
      out.write("\t\t\ttext-align: center;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t ");

        // Pročitaj cijenu iz session atributa
        Integer vehiclePrice = (Integer) session.getAttribute("vehiclePrice");
        if (vehiclePrice == null) {
            vehiclePrice = 10; // Default vrijednost ako atribut ne postoji
        }
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<div class=\"mb-3\">\r\n");
      out.write("\t\t\t<label class=\"form-label\">Amount</label>\r\n");
      out.write("\t\t\t<input type=\"number\" id=\"amount\" class=\"form-control\" disabled>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"mb-3\">\r\n");
      out.write("\t\t\t<label class=\"form-label\">Time</label>\r\n");
      out.write("\t\t\t<input type=\"text\" id=\"time\" class=\"form-control\" disabled>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"mb-3\">\r\n");
      out.write("\t\t\t<button id=\"finishButton\" class=\"btn btn-primary\">Finish</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t <!-- Skriveni input za pohranu cijene -->\r\n");
      out.write("    <input type=\"hidden\" id=\"vehiclePrice\" value=\"");
      out.print( vehiclePrice );
      out.write("\">\r\n");
      out.write("    <input type=\"hidden\" id=\"idVehicle\" value=\"");
      out.print( session.getAttribute("idVehicle") );
      out.write("\">\r\n");
      out.write("    <input type=\"hidden\" id=\"latitude\" value=\"");
      out.print( session.getAttribute("latitude") );
      out.write("\">\r\n");
      out.write("\t<input type=\"hidden\" id=\"longitude\" value=\"");
      out.print( session.getAttribute("longitude") );
      out.write("\">\r\n");
      out.write("    \r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<script>\r\n");
      out.write("    const idVehicle = document.getElementById('idVehicle').value;\r\n");
      out.write("    \r\n");
      out.write("    const latitudeInput = document.getElementById('latitude');\r\n");
      out.write("    const longitudeInput = document.getElementById('longitude');\r\n");
      out.write("\r\n");
      out.write("    let latitude = parseFloat(latitudeInput.value) || 44.7866; // Default vrednost (Beograd)\r\n");
      out.write("    let longitude = parseFloat(longitudeInput.value) || 20.4489;\r\n");
      out.write("\r\n");
      out.write("    const vehiclePrice = parseInt(document.getElementById('vehiclePrice').value, 10);\r\n");
      out.write("    console.log(\"Vehicle Price:\", vehiclePrice);\r\n");
      out.write("\r\n");
      out.write("    const amountInput = document.getElementById('amount');\r\n");
      out.write("    amountInput.value = vehiclePrice; // Postavi početnu vrednost na vehiclePrice\r\n");
      out.write("\r\n");
      out.write("    let startTime = 0;\r\n");
      out.write("    const timeInput = document.getElementById(\"time\");\r\n");
      out.write("\r\n");
      out.write("    // Vremenski korak za testiranje: 30 minuta (1800 sekundi)\r\n");
      out.write("    const timeStep = 1800;\r\n");
      out.write("    let isFirstHour = true;\r\n");
      out.write("\r\n");
      out.write("    function updateTime() {\r\n");
      out.write("        const hours = Math.floor(startTime / 3600);\r\n");
      out.write("        const minutes = Math.floor((startTime % 3600) / 60);\r\n");
      out.write("        const seconds = startTime % 60;\r\n");
      out.write("\r\n");
      out.write("        const formattedTime =\r\n");
      out.write("            String(hours).padStart(2, '0') + ':' +\r\n");
      out.write("            String(minutes).padStart(2, '0') + ':' +\r\n");
      out.write("            String(seconds).padStart(2, '0');\r\n");
      out.write("\r\n");
      out.write("        timeInput.value = formattedTime;\r\n");
      out.write("        startTime += timeStep;\r\n");
      out.write("\r\n");
      out.write("        // Ažuriraj koordinate (povećanje za 1 metar)\r\n");
      out.write("        updateCoordinates(1000);\r\n");
      out.write("\r\n");
      out.write("        if (startTime % 3600 === 0 && startTime > 0) {\r\n");
      out.write("            console.log(\"Prelazak u novi sat! startTime:\", startTime);\r\n");
      out.write("\r\n");
      out.write("            if (!isFirstHour) {\r\n");
      out.write("                calculateAmount();\r\n");
      out.write("            } else {\r\n");
      out.write("                isFirstHour = false;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function updateCoordinates(distanceMeters) {\r\n");
      out.write("    \t\r\n");
      out.write("    \tconsole.log(\"Distanca primljena:\", distanceMeters); // Debug\r\n");
      out.write("    \t\r\n");
      out.write("        const earthRadius = 6378137; // Poluprečnik Zemlje u metrima\r\n");
      out.write("        const pi = Math.PI;\r\n");
      out.write("\r\n");
      out.write("        const deltaLat = (distanceMeters / earthRadius) * (180 / pi);\r\n");
      out.write("        const deltaLon = (distanceMeters / earthRadius) * (180 / pi) / Math.cos(latitude * (pi / 180));\r\n");
      out.write("\r\n");
      out.write("        latitude += deltaLat;\r\n");
      out.write("        longitude += deltaLon;\r\n");
      out.write("\r\n");
      out.write("        console.log('Pomeraj: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${distanceMeters}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("m | Nova Lat: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${latitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(", Nova Lon: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${longitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("\r\n");
      out.write("        latitudeInput.value = latitude.toFixed(8);\r\n");
      out.write("        longitudeInput.value = longitude.toFixed(8);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    function calculateAmount() {\r\n");
      out.write("        console.log(\"Pozvan calculateAmount!\");\r\n");
      out.write("        const currentAmount = parseInt(amountInput.value, 10) || 0;\r\n");
      out.write("        const newAmount = currentAmount + vehiclePrice;\r\n");
      out.write("        console.log(`Novi iznos: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${newAmount}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\r\n");
      out.write("        amountInput.value = newAmount;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    document.getElementById('finishButton').addEventListener('click', function() {\r\n");
      out.write("        const rentingDuration = Math.ceil(startTime / 3600);\r\n");
      out.write("        const dropoffLocation = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${latitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(',');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${longitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\r\n");
      out.write("        const pickupLocation = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${latitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(',');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${longitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\r\n");
      out.write("        const amount = amountInput.value;\r\n");
      out.write("\r\n");
      out.write("        const rentalData = {\r\n");
      out.write("            id_vehicle: idVehicle,\r\n");
      out.write("            renting_duration: rentingDuration,\r\n");
      out.write("            pickup_location: pickupLocation,\r\n");
      out.write("            dropoff_location: dropoffLocation,\r\n");
      out.write("            amount: amount\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        console.log(\"Podaci za slanje:\", rentalData);\r\n");
      out.write("\r\n");
      out.write("        fetch('/ClientApp/Controller?action=finishRental', {\r\n");
      out.write("            method: 'POST',\r\n");
      out.write("            headers: {\r\n");
      out.write("                'Content-Type': 'application/json',\r\n");
      out.write("            },\r\n");
      out.write("            body: JSON.stringify(rentalData),\r\n");
      out.write("        })\r\n");
      out.write("        .then(response => {\r\n");
      out.write("            if (response.ok) {\r\n");
      out.write("                window.location.href = \"/ClientApp/Controller?action=mainPage\";\r\n");
      out.write("            } else {\r\n");
      out.write("                alert(\"Failed to finish rental!\");\r\n");
      out.write("            }\r\n");
      out.write("        })\r\n");
      out.write("        .catch((error) => {\r\n");
      out.write("            console.error('Error:', error);\r\n");
      out.write("            alert(\"Failed to finish rental!\");\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    setInterval(updateTime, 1000); // Simulacija kretanja svake sekunde\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
